\usepackage{epsf}
\def\epsfsize#1#2{.24\textheight}
\let\spadepsffilesave\epsffile
\def\epsffile[#1]#2{\begin{center}\spadepsffilesave[#1]{#2}\end{center}}

\usepackage{amsmath}
\usepackage{flexisym}
\usepackage{breqn}
\setkeys{breqn}{breakdepth={9}}
\usepackage{verbatim} % Needed for the discard environment.
\usepackage{hyperref}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RH: The following code is mainly from Manuel Kauers. I'm not sure
% whether I should include it, but it fixes the problem that breqn
% \ProvidesExplPackage{breqn}{2012/05/10}{0.98b}{Breaking equations}
% does seemingly not process numerator and denominator of \frac{}{}
% separately. In the book, we often have just a top-level \frac{}{}
% whose numerator is too wide. Therefore, in the LaTeXOutput
% environment, we check whether the first token is \frac and basically
% replace it by \mkfrac or otherwise enter the dmath environment.
\newbox\numeratorbox
\newbox\denominatorbox
\def\mkfrac#1#2{%
  \begin{equation}
  \mathchoice{% display
    \setbox\numeratorbox=\hbox{$\textstyle #1$}
    \ifdim\wd\numeratorbox>.75\hsize
    \setbox\numeratorbox=\vbox{\hsize=.7\hsize\hangindent=1em\hangafter=1\relax\noindent\begin{flushleft}$\textstyle #1$\end{flushleft}}
    \fi
    \setbox\denominatorbox=\hbox{$\textstyle #2$}
    \ifdim\wd\denominatorbox>.75\textwidth
    \setbox\denominatorbox=\vbox{\hsize=.75\textwidth\hangindent=1em\hangafter=1\relax\noindent\begin{flushleft}$\textstyle #2$\end{flushleft}}
    \fi
    \frac{\box\numeratorbox}{\box\denominatorbox}
  }
  {\frac{#1}{#2}} % text
  {\frac{#1}{#2}} % script
  {\frac{#1}{#2}} % scriptscript
  \end{equation}
}
\def\tomkfrac#1{\mkfrac}
\usepackage{boxedminipage}
\usepackage{color}
\definecolor{spadinputcolor}{rgb}{0.95,1,0.95}
\definecolor{messagecolor}{rgb}{1,0.95,0.95}
\definecolor{bgcode}{rgb}{1,1,0.7}
\usepackage{listings}

% Markup for a TeX command sequence.
% The argument should only consist of letters.
%TODO: We should index it.
\DeclareRobustCommand\cs[1]{\texttt{\char`\\#1}}

% some things that are produced by latex.spad
\DeclareMathOperator{\csch}{csch}
\DeclareMathOperator{\erf}{erf}
\def\zag#1#2{\frac{\left.{#1}\right|}{\left|{#2}\right.}}
\newenvironment{LaTeXMath}{}{}
\def\tomkfrac#1{\mkfrac}
\newenvironment{LaTeXOutput}%
  {\def\stepNumber##1{}\begin{ColoredBackground}{mathoutput}\small%
      \@ifnextchar\frac%
        {\def\endXMATH{}\tomkfrac}%
        {\def\endXMATH{\end{dmath}}\begin{dmath}[]}}%
  {\endXMATH\end{ColoredBackground}}


\def\schapter{\chapter*} %foreword.tex
\def\pseudoSection{\section*}

% The command |\prolitex@other| just helps to make shorter definitions
% later. We need a way to treat an argument in such a way that it can be
% used for the definition of a command, \ie, inside the |\csname|,
% |\endcsname| pair. The |\@onelevel@sanitize| command defined in
% \LaTeX's \packagename{ltdefns.dtx} does exactly that. It takes a
% control sequence and turns its contents into letters of category
% code 12 (other).
% \begin{verbatim}
% \prolitex@other\somecommand{ARG}\end{verbatim}
% will first turn all characters in ARG into characters with
% category code 12 (other) and then invoke |\somecommand| on this
% translated ARG.
%    \begin{macrocode}
\def\prolitex@other#1#2{\def\prolitex@value{#2}%
  \@onelevel@sanitize\prolitex@value
  \expandafter#1\expandafter{\prolitex@value}}
%    \end{macrocode}

% ------------------------------------------------------------------------
% Page Parameters
% ------------------------------------------------------------------------
\setlength{\topmargin}{\z@}
\setlength{\oddsidemargin}{\z@}
\setlength{\evensidemargin}{\z@}
\addtolength{\textwidth}{35mm}

\parskip .5\baselineskip \parindent \z@
\def\baselinestretch{1.0}
\raggedbottom

% %
% % Macros
% %
\newcommand{\xdefault}[1]{The default value is \texttt{"#1"}.}
\def\noHyphens{\hyphenpenalty=10001}
% \def\Autodoc{{\it The \Language{} Library Cross-Reference}}
\def\Browse{{Browse}}
\def\Clef{{Clef}}
\def\Gallery{{\Language{} Images}}
\def\HyperName{{HyperDoc}}
\def\Language{{FriCAS}}
\def\Lisp{{Common LISP}}
\def\Fortran{Fortran}
\def\aldor{Aldor}

\def\beginImportant{\vspace{.2in}\noindent\begin{boxedminipage}{\textwidth}}%
\def\endImportant{\end{boxedminipage}\vspace{.2in}}
% following handles things like "i-th" but uses superscripts for "th"
\def\eth#1{\ensuremath{{#1}^{\textrm{\small th}}}}
\long\def\head#1#2#3{\@nameuse{#1}{#2}\label{#3}\setcounter{equation}{0}\par}
\let\mathOrSpad\ensuremath
\let\smath\ensuremath
\def\twodim{two-di\-men\-sion\-al}
\def\threedim{three-di\-men\-sion\-al}
\long\def\labelSpace#1{}
\def\titledspadref#1#2{`#1' in \spadref{#2}}

\def\nonLibAxiomType{\spadtype}          % things that browse can't handle
\def\pspadtype{\spadtype}

\def\@spadcmd#1{{\tt #1}}
\def\spadcmd#1{\prolitex@other\@spadcmd{#1}}
\let\spadsys\spadcmd

\def\@spadcommand#1{\begin{flushleft}#1\end{flushleft}\vspace{-9pt}}
\def\spadcommand{\prolitex@other\@spadcommand}

\def\spadgloss#1{\index{#1}{\it #1}}
\def\spadglossSee#1#2{\index{#2}{\it #1}}
\def\spadgraph{\spadcommand}
\def\spadkey#1{\index{#1 @\begingroup \string\tt{} #1 \endgroup}}
\def\spadref#1{Section \ref{#1} on page \pageref{#1}}
\def\chapref#1{Chapter~\ref{#1}}
\def\appxref#1{Appendix~\ref{#1}}
\def\subscriptIt#1#2{$\hbox{\it #1}_{#2}$}
\def\subscriptText#1#2{$\hbox{\it #1}_{\hbox{\small\rm #2}}$}
% \def\tab#1{}
\long\def\texht#1#2{#1}
\def\windowlink#1#2{{\bf #1}}
\def\xmpref#1{`\texttt{#1}' on page \pageref{#1Xmp}}

% quick versions of following
\def\spadatt#1{{\tt #1}} % spad attribute (not in FriCAS anymore)

% % the next few are used in the appendices listing categories, domains and
% % packages.

% Bitmaps
\newcommand\StdExitButton{{\setlength{\unitlength}{0.01in}\begin{picture}(50,16)(0,0)\special{psfile=ps/exit.ps}\end{picture}}}
\newcommand\ReturnButton{{\setlength{\unitlength}{0.01in}\begin{picture}(50,16)(0,0)\special{psfile=ps/home.ps}\end{picture}}}
\newcommand\StdHelpButton{{\setlength{\unitlength}{0.01in}\begin{picture}(50,16)(0,0)\special{psfile=ps/help.ps}\end{picture}}}
\newcommand\UpBitmap{{\setlength{\unitlength}{0.01in}\begin{picture}(50,16)(0,0)\special{psfile=ps/up.ps}\end{picture}}}
\let\UpButton\UpBitmap

% file extension for library source files
\def\spadFileExt#1{.spad}

%
% Macros for function names. We need the X versions because the indexing
% software uses ! for level separators.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{makeidx}
\makeindex
\usepackage{xparse}
\NewDocumentCommand{\verbspadop}{v}{\textcolor{magenta}{\texttt{#1}}}
\NewDocumentCommand{\verbspadfun}{v}{\textcolor{red}{\texttt{#1}}}
\NewDocumentCommand{\verbspadtype}{v}{\textcolor{blue}{\textsf{#1}}}
\NewDocumentCommand{\verbspadsyntax}{v}{\textcolor[rgb]{0,0.5,0.5}{\texttt{#1}}}

\NewDocumentCommand{\textspadop}{m}{\textcolor{magenta}{\texttt{#1}}}
\NewDocumentCommand{\textspadfun}{m}{\textcolor{red}{\textsf{#1}}}
\NewDocumentCommand{\textspadtype}{m}{\textcolor{blue}{\textbf{#1}}}
\NewDocumentCommand{\textspadexpr}{m}{\textcolor[rgb]{0,0.5,0}{\texttt{#1}}}
\NewDocumentCommand{\textspadsyntax}{m}{``\textcolor[rgb]{0,0.5,0.5}{\texttt{#1}}''}

\NewDocumentCommand{\spadindex}{m >{\EscapeMakeindexSpecial} m}{%
  \index{#1`#2`}}
\def\EscapeMakeindexSpecial#1{%
   \def\ProcessedArgument{\ProcessList{#1}{\EscapeMakeindexSpecialOne}}}
\def\EscapeMakeindexSpecialOne#1{%
  \if#1!"\fi
  \if#1@"\fi
  \if#1|"\fi
  #1}

\catcode`\$=12\relax % other
\NewDocumentCommand{\spadname}{m >{\SplitArgument{1}{$}} v}{%$
  \csname format#1\endcsname#2}
\catcode`\$=3\relax % math shift

\def\formatop#1#2{%
  \textspadop{#1}%
%  \IfNoValueTF{#2}{}{\textspadop{(#2)}}%
  \spadindex{library!operations!\verbspadop}{#1}}

\def\formatfun#1#2{%
  \textspadfun{#1}%
%  \IfNoValueTF{#2}{}{\textspadfun{(#2)}}%
  \spadindex{library!operations!\verbspadfun}{#1}}

\def\formattype#1#2{%
  \textspadtype{#1}%
%  \IfNoValueTF{#2}{}{\textspadtype{(#2)}}%
  \spadindex{library!constructors!\verbspadtype}{#1}}

\def\spadop{\spadname{op}}
\def\spadfun{\spadname{fun}}
\def\spadtype{\spadname{type}}

\NewDocumentCommand{\spadSyntax}{v}{%
  \textspadsyntax{#1}%
  \spadindex{\verbspadsyntax}{#1}}

\def\spadreplace#1#2{\textcolor[rgb]{0,0.5,0.5}{#1}}
% Terrible hack, but without a box, breqn.sty seems to have changed
% something, so that an underscore does not work in #1 in \spadreplace.
\newbox\spadboxsigmak \setbox\spadboxsigmak=%
  \hbox{\textcolor[rgb]{0,0.5,0.5}{$\sigma_k$}}
\def\spadsigmak#1{\copy\spadboxsigmak}
\def\spad{\lstinline[%
  basicstyle={\ttfamily\color[rgb]{0,0.5,0}},
  breaklines=true,
  literate={->}{$\to$}{2},
  classoffset=0,keywords={sigma_k},keywordstyle=\spadsigmak,
  classoffset=1,keywords={sigma},  keywordstyle=\spadreplace{$\sigma$},
  classoffset=2,keywords={mu},     keywordstyle=\spadreplace{$\mu$},
  classoffset=3,keywords={phi},    keywordstyle=\spadreplace{$\varphi$},
]}

% We cannot have verbose-type commands inside other commands.
\let\spadfootnotesave\footnote
\def\footnote#1{\begingroup
  \def\spad{\textspadexpr}%
  \def\spadop{\textspadop}%
  \def\spadfunFrom##1{\textspadfun{##1}\@gobble}%
  \def\spadtype{\textspadtype}%
  \def\spadSyntax{\textspadsyntax}%
  \spadfootnotesave{#1}\endgroup}

\let\spadcaptionsave\caption
\def\caption#1{\begingroup
  \def\spadfunFrom##1{\textspadfun{##1}\@gobble}
  \def\spadfun{\textspadfun}
  \def\spadtype{\textspadtype}%
  \spadcaptionsave{#1}\endgroup}

\NewDocumentCommand{\spadfunX}{v}{\spadfun`#1!`}
\NewDocumentCommand{\spadfunFrom}{v v}{\spadfun`#1`}
\NewDocumentCommand{\spadfunFromX}{v v}{\formatfun{#1!}{#2}}%$
\NewDocumentCommand{\spadopFrom}{v v}{\formatop{#1}{#2}}
\NewDocumentCommand{\aliascon}{v v}{\spadtype`#1`}



\def\void{the unique value of \formattype{Void}{}}
\def\showBlurb#1{Issue the system command \spadcmd{)show #1} %(
  to display the full list of operations defined by \formattype{#1}{}.}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\def\fakeAxiomFun#1{{\bf #1}}              % not really in library
\def\pspadfun{\fakeAxiomFun}


\def\userfun#1{\index{example functions!#1 @\begingroup \string\bf{} #1 \endgroup}{\bf #1}}

\def\exptypeindex#1{\index{library!constructors!#1 @\begingroup \string\sf{} #1 \endgroup}}
\def\syscmdindex#1{\index{system commands!#1 @\begingroup \string\tt{} )#1 \endgroup}}

% Some macros for Jenks' glossary
\newenvironment{items}{\begin{itemize}}{\end{itemize}}

% Environments
\newenvironment{discard}{\comment}{\endcomment}
% TODO: should get rid of the following
\newenvironment{htonly}{\comment}{\endcomment}
\newenvironment{texonly}{}{}




% This environment provides a simple, unbulleted list, one level deep.
\newenvironment{simpleList}%
  {\begin{list}{}{\itemsep 2pt \topsep \parskip \parsep \z@
   \leftmargin 1pc \partopsep \z@ \parskip \z@
   \if@twocolumn\else\linewidth\textwidth\fi}}
  {\end{list}\vskip -\parskip}

% ------------------------------------------------------------------------
% the code, comments, line numbers environment
% ------------------------------------------------------------------------

% ------------------------------------------------------------------------
% the two-column comment and \spadcommand macros
% ------------------------------------------------------------------------

% for some reason morekeywords swallows a space, so we reintroduce it here
\def\formatResultType#1{\begingroup
  \begin{ColoredBackground}{resulttype}
    \hfill
    \lstinline[%
      basicstyle=\footnotesize\sffamily\color{blue},%
      literate={->}{$\to$}{2},%
      breaklines=true,]`#1`%
  \end{ColoredBackground}\endgroup}

\lstdefinelanguage{spad}{basicstyle=\footnotesize\ttfamily,%
  comment=[l]--,commentstyle=\footnotesize\color{blue},texcl,%
  escapebegin=\rmfamily}

\lstset{language={},basicstyle=\footnotesize\ttfamily}

\lstnewenvironment{spadsrc}%
  {\lstset{language=spad,backgroundcolor=\color{spadinputcolor},breaklines=true,breakatwhitespace=true,prebreak={\_}}}%
  {}
\lstnewenvironment{SysCmdOutput}%
  {\lstset{backgroundcolor=\color{messagecolor}}}%
  {}
\lstnewenvironment{MessageOutput}%
  {\lstset{backgroundcolor=\color{messagecolor}}}%
  {}

%% This one does not reset the line numbers. Does have horizontal rules.
\lstnewenvironment{xmpLinesNoReset}%
  {\lstset{backgroundcolor=\color{bgcode},frame=tb,numbers=left,firstnumber=last}}%
  {}

%% This one does reset the line numbers. Does have horizontal rules.
\lstnewenvironment{xmpLines}%
  {\lstset{language=spad,backgroundcolor=\color{bgcode},frame=tb,numbers=left}%
    \def\spad{\textspadexpr}}
  {}

%% This one does not reset the line numbers. Does not have horizontal rules.
\lstnewenvironment{xmpLinesNoResetPlain}%
  {\lstset{language=spad,backgroundcolor=\color{bgcode},
      numbers=left,numbers=left,firstnumber=last}%
    \def\spad{\textspadexpr}}
  {}

%% This one does reset the line numbers. Does not have horizontal rules.
\lstnewenvironment{xmpLinesPlain}%
  {\lstset{language=spad,backgroundcolor=\color{bgcode},numbers=left}%
    \def\spad{\textspadexpr}}
  {}

%% xmpLines with caption
\lstnewenvironment{figXmpLines}[1][]%
  {\lstset{language=spad,backgroundcolor=\color{bgcode},frame=tb,%
      numbers=left,#1}%
    \def\spad{\textspadexpr}}
  {}




\newenvironment{xtccomment}{}{}%
%  {\begin{minipage}[t]{\textwidth}}%
%  {\end{minipage}}

\def\MakeFramed{\begingroup}
\def\endMakeFramed{\endgroup}%
\IfFileExists{framed.sty}{%
  \usepackage{framed}[2003/07/21 v 0.8a]%
}{%
  \PackageWarning{fricas.sty}{framed.sty not found}%
}
\newenvironment{ColoredBackground}[1]%
  {\@ifundefined{background#1}%
     {\def\FrameCommand{}}%
     {\def\FrameCommand{\csname background#1\endcsname}}%
   \trivlist\item\MakeFramed{}}%
  {\endMakeFramed\endtrivlist}
\def\backgroundColor#1#2#{\background@Color{#1}{#2}}
\def\background@Color#1#2#3{%
  \expandafter\gdef\csname background#1\endcsname{\@backgroundColor{#1}#2{#3}}}
\def\@backgroundColor#1{\colorbox}%
\backgroundColor{mathoutput}[rgb]{0.95,0.95,1}
\backgroundColor{resulttype}[rgb]{0.98,0.98,1}
\renewcommand{\theequation}{\arabic{equation}}

%--rhx: TODO: The xtc stuff should be simplified.
\newenvironment{xtc}{}{}
% This is meant for things (usually system commands) that produce
% absolutely no output. It is renamed because \xtc forms get changed
% to \xtcLong forms to display the output.
% See htex2input.awk.
\newenvironment{noOutputXtc}{}{}
% This is for things that should appear as if they are two-column
% input/output but we are reaaly only showing the input.
\newenvironment{nullXtc}{}{}
\newenvironment{psXtc}{}{}

\hyphenation{AXIOM}
\hyphenation{Integer}
\hyphenation{Single-Integer}
\hyphenation{Double-Float}
\hyphenation{Machine-Float}
\hyphenation{Machine-Complex}
\hyphenation{Matrix}
\hyphenation{Expression}
\hyphenation{sub-program}
\hyphenation{SUB-ROUTINE}
\hyphenation{SUB-ROUTINEs}
\hyphenation{Hyper-Doc}
\hyphenation{Founda-tion}
\hyphenation{localSymbols}
\hyphenation{Full-Partial-Fraction-Expansion}
\hyphenation{Linear-Ordinary-Differential-Operator}
\hyphenation{Quad-rat-ic-Form}
\hyphenation{Homo-gen-eous-Dis-tributed-Multi-var-i-ate-Pol-y-nomial}
\hyphenation{
In-dexed-Aggre-gate
Lin-ear-Aggre-gate
shallowly-Mutable
draw-Vector-Field
set-Real-Steps
set-Imag-Steps
set-Clip-Value
Uni-var-iate-Poly-nomial
Mul-ti-var-iate-Poly-nomial
Distributed-Mul-ti-var-iate-Poly-nomial
Homo-gen-eous-Distributed-Mul-ti-var-iate-Poly-nomial
New-Distributed-Mul-ti-var-iate-Poly-nomial
General-Distributed-Mul-ti-var-iate-Poly-nomial
}

\pagestyle{headings}
\makeindex

% For chapter 6 (User-Defined Functions, Macros and Rules)
\newcommand{\pred}[1]{\subscriptIt{pred}{#1}}
\newcommand{\expr}[1]{\subscriptIt{expression}{#1}}

% For chapter 7 (Graphics)
\newcommand{\optArg}[1]{{{\tt [}{#1}{\tt ]}}}
\newcommand{\argDef}[1]{{\tt ({#1})}}
\newcommand{\funSyntax}[2]{\spadfun{#1}{\tt ({\small\it{#2}})}}
\newcommand{\funArgs}[1]{{\tt ({\small\it {#1}})}\newline}

% For chapter 16 (\Language{} System Commands)
\newcommand{\lanb}{{\tt [}}
\newcommand{\ranb}{{\tt ]}}
\newcommand{\vertline}{\texht{$|$}{{\tt |}}}
